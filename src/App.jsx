import { useState, useEffect } from 'react';

function App() {
  const [toastMessage, setToastMessage] = useState("");
  const [banners, setBanners] = useState([
    { image: "/images/banner1.jpg", label: "üî• –ü—Ä–æ–¥—É–∫—Ç –¥–Ω—è", tag: "–•–ò–¢" },
    { image: "/images/banner2.jpg", label: "üéÅ –ë–æ–Ω—É—Å –∑–∞ Stories", tag: "–ê–ö–¶–ò–Ø" },
    { image: "/images/banner3.jpg", label: "üèÜ –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è –≥–µ—Ä–æ–µ–≤", tag: "–ß–ï–õ–õ–ï–ù–î–ñ" },
  ]);
  const [isSubscribed, setIsSubscribed] = useState(false);
  const [cart, setCart] = useState({});
  const [navTab, setNavTab] = useState("–ì–ª–∞–≤–Ω–∞—è");
  const [paymentMethod, setPaymentMethod] = useState("Click");
  const [votes, setVotes] = useState({});
  const [heroProgress, setHeroProgress] = useState(0);

  const merchItems = [
    { id: 1, name: "–§—É—Ç–±–æ–ª–∫–∞ Hubchik", image: "/images/merch1.jpg", price: "149000" },
    { id: 2, name: "–ö–µ–ø–∫–∞ Hubchik", image: "/images/merch2.jpg", price: "89000" },
    { id: 3, name: "–¢–µ—Ä–º–æ–∫—Ä—É–∂–∫–∞ Hubchik", image: "/images/merch3.jpg", price: "109000" },
  ];

  const votingData = [
    {
      question: "–ö–∞–∫–æ–µ –±–ª—é–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–µ–Ω—é?",
      options: ["–ö–∏–º—á–∏ –ª–∞–≤–∞—à", "–°—ã—Ä–Ω—ã–π –±–∞—Å–∫–µ—Ç", "–û—Å—Ç—Ä—ã–µ –∫—Ä—ã–ª—å—è"]
    },
    {
      question: "–ß—Ç–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å –Ω–∞ —Å—Ç–∞–∫–∞–Ω–∞—Ö?",
      options: ["#hubchikpower", "–ü–∏—Ç–∞–π—Å—è –∫–∞–∫ –±–æ—Å—Å", "–ë–µ—Ä–∏ –±–æ–ª—å—à–µ"]
    }
  ];

  useEffect(() => {
    const count = Object.values(cart).reduce((acc, qty) => acc + qty, 0);
    setHeroProgress(Math.min(100, count * 10)); // 10% –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É
  }, [cart]);

  const handleVote = (qIdx, option) => {
    setVotes((prev) => ({ ...prev, [qIdx]: option }));
    setToastMessage("–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω üôå");
    setTimeout(() => setToastMessage(""), 2500);
  };

  const addToCart = (id) => {
    setCart((prev) => ({ ...prev, [id]: (prev[id] || 0) + 1 }));
    setToastMessage("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É! üõí");
  };

  const removeFromCart = (id) => {
    setCart((prev) => {
      const updated = { ...prev };
      if (updated[id] > 1) updated[id] -= 1;
      else delete updated[id];
      return updated;
    });
  };

  const cartItems = merchItems.filter((item) => cart[item.id]);
  const totalPrice = cartItems.reduce((acc, item) => acc + cart[item.id] * parseInt(item.price), 0);

  return (
    <div className="pb-24">
      {navTab === "–ì–ª–∞–≤–Ω–∞—è" && (
        <div className="p-4 space-y-4">
          {banners.map((banner, idx) => (
            <div key={idx} className="rounded-xl overflow-hidden shadow">
              <img src={banner.image} alt="banner" className="w-full h-32 object-cover" />
            </div>
          ))}

          <h2 className="text-xl font-semibold text-[#2c924d] mt-4">üéÅ –ú–µ—Ä—á Hubchik</h2>
          {merchItems.map((item) => (
            <div key={item.id} className="border rounded-xl p-3 flex items-center justify-between">
              <div>
                <div className="font-medium text-[#ec6839]">{item.name}</div>
                <div className="text-sm text-gray-600">{parseInt(item.price).toLocaleString()} —Å—É–º</div>
              </div>
              <button
                onClick={() => addToCart(item.id)}
                className="px-3 py-1 text-sm bg-[#2c924d] text-white rounded-xl"
              >
                –í –∫–æ—Ä–∑–∏–Ω—É
              </button>
            </div>
          ))}
        </div>
      )}

      {navTab === "–ö–æ—Ä–∑–∏–Ω–∞" && (
        <div className="p-4 space-y-4">
          <h2 className="text-xl font-bold text-[#ec6839]">üõí –ö–æ—Ä–∑–∏–Ω–∞</h2>
          {cartItems.length === 0 ? (
            <p className="text-sm text-gray-500">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
          ) : (
            <>
              {cartItems.map((item) => (
                <div key={item.id} className="flex items-center justify-between border-b pb-2">
                  <div>{item.name}</div>
                  <div className="flex items-center gap-2">
                    <button onClick={() => removeFromCart(item.id)} className="px-2 bg-[#ec6839] text-white">‚àí</button>
                    <span>{cart[item.id]}</span>
                    <button onClick={() => addToCart(item.id)} className="px-2 bg-[#2c924d] text-white">+</button>
                  </div>
                </div>
              ))}
              <div className="text-right font-medium text-[#2c924d]">
                –û–±—â–∞—è —Å—É–º–º–∞: {totalPrice.toLocaleString()} —Å—É–º
              </div>
              <label className="block text-sm font-medium mb-1">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</label>
              <select
                value={paymentMethod}
                onChange={(e) => setPaymentMethod(e.target.value)}
                className="w-full p-2 border rounded"
              >
                <option value="Click">Click Pay</option>
                <option value="Payme">Payme</option>
                <option value="Cash">–ù–∞–ª–∏—á–Ω—ã–µ</option>
              </select>
              <button className="w-full mt-2 py-2 bg-[#2c924d] text-white rounded-xl">–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</button>
            </>
          )}
        </div>
      )}

      {navTab === "–¢—ã ‚Äî –ë–û–°–°" && (
        <div className="p-4 space-y-6">
          <h1 className="text-2xl font-bold text-[#2c924d]">üó≥Ô∏è –¢—ã ‚Äî –ë–û–°–°</h1>
          {votingData.map((vote, qIdx) => (
            <div key={qIdx} className="bg-white shadow rounded-xl p-4 border">
              <h2 className="text-lg font-semibold mb-3 text-[#ec6839]">{vote.question}</h2>
              <div className="flex flex-col gap-2">
                {vote.options.map((opt, oIdx) => (
                  <button
                    key={oIdx}
                    onClick={() => handleVote(qIdx, opt)}
                    className={`px-4 py-2 rounded border text-sm transition font-medium ${
                      votes[qIdx] === opt
                        ? 'bg-[#2c924d] text-white border-[#2c924d]'
                        : 'border-gray-300 text-gray-700 hover:bg-gray-100'
                    }`}
                  >
                    {opt}
                  </button>
                ))}
              </div>
            </div>
          ))}
        </div>
      )}

      {navTab === "–ü–æ–¥–ø–∏—Å–∫–∞" && (
        <div className="p-4">
          <h2 className="text-xl font-bold text-[#2c924d]">üçπ –ü–æ–¥–ø–∏—Å–∫–∞ Hubchik+</h2>
          <p className="text-sm mt-2 mb-4 text-gray-600">–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –Ω–∞–ø–∏—Ç–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, —Å–∫–∏–¥–∫–∞ 15%, —Ä–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤–∏–Ω–∫–∞–º.</p>
          <button
            onClick={() => setIsSubscribed(!isSubscribed)}
            className="w-full py-2 rounded-xl text-white font-semibold bg-[#ec6839]"
          >
            {isSubscribed ? "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è" : "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É Hubchik+"}
          </button>
        </div>
      )}

      {navTab === "Hubchik‚Äôs Hero" && (
        <div className="p-4">
          <h2 className="text-xl font-bold text-[#2c924d]">ü¶∏ Hubchik‚Äôs Hero</h2>
          <p className="text-sm text-gray-600 mb-2">–¢—ã –≤ –∫–ª—É–±–µ —ç–ª–∏—Ç–Ω—ã—Ö –≥–æ—Å—Ç–µ–π! –ü–æ–ª—É—á–∞–π –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏, –¥–æ—Å—Ç—É–ø –∫ —Å–ø–µ—Ü–º–µ–Ω—é –∏ –±–æ–Ω—É—Å–∞–º.</p>
          <div className="w-full bg-gray-200 rounded-full h-4 overflow-hidden">
            <div
              className="bg-[#2c924d] h-full text-xs text-white text-center"
              style={{ width: `${heroProgress}%` }}
            >
              {heroProgress}%
            </div>
          </div>
          <p className="mt-2 text-sm text-gray-500">–°–æ–≤–µ—Ä—à–∞–π –ø–æ–∫—É–ø–∫–∏, —á—Ç–æ–±—ã –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å—Å—è!</p>
        </div>
      )}

      {/* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="fixed bottom-0 left-0 right-0 z-50 bg-white border-t flex justify-around py-2">
        {["–ì–ª–∞–≤–Ω–∞—è", "–ö–æ—Ä–∑–∏–Ω–∞", "–¢—ã ‚Äî –ë–û–°–°", "–ü–æ–¥–ø–∏—Å–∫–∞", "Hubchik‚Äôs Hero"].map((tab) => (
          <button
            key={tab}
            onClick={() => setNavTab(tab)}
            className={`text-xs font-medium ${navTab === tab ? 'text-[#ec6839]' : 'text-gray-500'}`}
          >
            {tab}
          </button>
        ))}
      </div>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ */}
      {toastMessage && (
        <div className="fixed bottom-14 left-1/2 -translate-x-1/2 px-4 py-2 bg-[#2c924d] text-white rounded-xl shadow">
          {toastMessage}
        </div>
      )}
    </div>
  );
}

export default App;
